######################################################################
#
#
#           ██████╗  █████╗ ███████╗██╗  ██╗██████╗  ██████╗
#           ██╔══██╗██╔══██╗██╔════╝██║  ██║██╔══██╗██╔════╝
#           ██████╔╝███████║███████╗███████║██████╔╝██║
#           ██╔══██╗██╔══██║╚════██║██╔══██║██╔══██╗██║
#           ██████╔╝██║  ██║███████║██║  ██║██║  ██║╚██████╗
#           ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝
#
#
######################################################################
#
# ~/.bashrc
#

[[ $- != *i* ]] && return

colors() {
	local fgc bgc vals seq0

	printf "Color escapes are %s\n" '\e[${value};...;${value}m'
	printf "Values 30..37 are \e[33mforeground colors\e[m\n"
	printf "Values 40..47 are \e[43mbackground colors\e[m\n"
	printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

	# foreground colors
	for fgc in {30..37}; do
		# background colors
		for bgc in {40..47}; do
			fgc=${fgc#37} # white
			bgc=${bgc#40} # black

			vals="${fgc:+$fgc;}${bgc}"
			vals=${vals%%;}

			seq0="${vals:+\e[${vals}m}"
			printf "  %-9s" "${seq0:-(default)}"
			printf " ${seq0}TEXT\e[m"
			printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
		done
		echo; echo
	done
}

[ -r /usr/share/bash-completion/bash_completion ] && . /usr/share/bash-completion/bash_completion

# Change the window title of X terminals
case ${TERM} in
	xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|interix|konsole*)
		PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\007"'
		;;
	screen*)
		PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\033\\"'
		;;
esac


# my custom commands
HISTCONTROL=ignoreboth          #any command begining with space or duplicates of ccommand already in history is not added to history
HISTSIZE=2000
HISTFILESIZE=10000

sed -i '/^..$/d' ~/.bash_history #  delete lines consisting of exactly two characters.
sed -i 's/^alias$//g' ~/.bash_history #delete line alias
sed -i 's/^cls$//g' ~/.bash_history  #delete line cls

printf "\n"
printf "   %s\n" "IP ADDR: $(curl ifconfig.me)"
printf "   %s\n" "USER: $(echo $USER)"
printf "   %s\n" "DATE: $(date)"
printf "   %s\n" "UPTIME: $(uptime -p)"
printf "   %s\n" "HOSTNAME: $(hostname -f)"
printf "   %s\n" "KERNEL: $(uname -rms)"
printf "   %s\n" "RESOLUTION: $(xrandr | awk '/\*/{printf $1" "}')"
printf "   %s\n" "MEMORY: $(free -m -h | awk '/Mem/{print $3"/"$2}')"
printf "   %s\n" "HDD: $(df -h |awk '/n1p2/{print $3 "/" $2 " (" $5 " full)"}')"
printf "\n"

use_color=true

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
	&& type -P dircolors >/dev/null \
	&& match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

if ${use_color} ; then
	# Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
	if type -P dircolors >/dev/null ; then
		if [[ -f ~/.dir_colors ]] ; then
			eval $(dircolors -b ~/.dir_colors)
		elif [[ -f /etc/DIR_COLORS ]] ; then
			eval $(dircolors -b /etc/DIR_COLORS)
		fi
	fi

	if [[ ${EUID} == 0 ]] ; then
		#PS1='\[\033[01;31m\][\h\[\033[01;36m\] \W\[\033[01;31m\]]\$\[\033[00m\] '
                PS1='\[\033[01;32m\][\w] \$ \[\033[00m\]'  #prompt 1 as  '[working directory] $'
	else
		#PS1='\[\033[01;32m\][\u@\h\[\033[01;37m\] \W\[\033[01;32m\]]\$\[\033[00m\] '
                PS1='\[\033[01;32m\][\w] \$ \[\033[00m\]'  #prompt 1 as  '[working directory] $'
 	fi

	alias ls='ls --color=auto --sort=time'
	alias grep='grep --colour=auto'
	alias egrep='egrep --colour=auto'
	alias fgrep='fgrep --colour=auto'
else
	if [[ ${EUID} == 0 ]] ; then
		# show root@ when we don't have colors
		PS1='\u@\h \W \$ '
	else
		PS1='\u@\h \w \$ '
	fi
fi

unset use_color safe_term match_lhs sh

alias df='df -h'          # human-readable sizes
alias la='ls -AF'          #Show all files except . and ..  and show / for folder
alias ..='cd ..;pwd;ls|head'
alias as='cd /run/media/e15/'
alias be='nano ~/.bashrc'
alias bk='bk -w 180'
alias bs='source ~/.bashrc'
alias cls='clear'
alias cpy='xclip -selection c'
alias disk='df -h | grep -v -E '\''loop|0%|1%'\'''
alias egrep='egrep --colour=auto'
alias execute='chmod u+x'
alias ffmpeg='ffmpeg -hide_banner'
alias ffprobe='ffprobe  -hide_banner'
alias fgrep='fgrep --colour=auto'
alias grep='grep --colour=auto'
alias hs='history |cut -c8-|sort|uniq|fzf|tr '\''\n'\'' '\'' '\''|cpy'
alias install='sudo pacman -S '
alias kk='cd ~/Downloads/'
alias ll='ytr && ls --sort=time|mpv "$(head -n 1)"'
alias lsd='ls -d */'
alias nano='nano -l '
alias nn='yt-dlp -f mp4 "$(xclip -o -select clipboard)" -o "%(id)s.%(ext)s"'
alias now='date +"%T"'
alias nowdate='date +"%d-%m-%Y"'
alias path='echo -e ${PATH//:/\\n}'
alias po='ls ~/Downloads |dmenu -i -l 20 -p Downloads_folder'
alias pp='pushd ~/scripts/'
alias qmv='qmv -f do'
alias qq='echo $(xclip -o -selection clipboard) >> videos'
alias sd='mpv --ytdl-format="bestvideo[ext=mp4][fps<=30][height<?1280]+bestaudio[ext=m4a]"  "$(xclip -o -selection clipboard)"'
alias speed='speedtest-cli --simple>>1.txt|nowdate>>1.txt|now>>1.txt'
alias uninstall='sudo pacman -R '
alias update='sudo pacman -Syyu'
alias vv='yt-dlp -w --no-mtime -f 140   -i "$(xclip -o -selection clipboard)" '
alias ytd='yt-dlp -w --no-mtime -f "bestvideo[height<=?1080]+bestaudio[ext=m4a]" -a list.txt'
alias ytr='yt-dlp -w --no-mtime -f "bestvideo[height<=?1080]+bestaudio[ext=m4a]"   -i "$(xclip -o -selection clipboard)" '




xhost +local:root > /dev/null 2>&1

# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.  #65623
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize

shopt -s expand_aliases

# export QT_SELECT=4

shopt -s histappend        # Enable history appending instead of overwriting.  
shopt -s autocd          # no need to write cd directly write path to cd.

#
# # ex - archive extractor
# # usage: ex <file>6
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

function pla() {
    if [ -z "$1" ]; then
        printf "%s\n" "Please provide a link.";
    else
        yt-dlp -i -j --flat-playlist "$1">>li.txt;
        jq -r  '.id + " # " + .title' li.txt>>lis.txt;
        sed 's_^_https://youtube.com/v/_' lis.txt >> list.txt;
        rm li.txt;
        rm lis.txt;
        printf "%s\n" "done.";
	cat list.txt;
	printf "%s\n";
    fi
}
function md() {
    if [ -z "$1" ]; then 
        printf "%s\n" "Please provide a directory name.";
    else
        mkdir "$1";
        cd "$1";
 fi
}


function cc() {
yt-dlp  -j --flat-playlist -i $(xclip -o -select clipboard) >l2.txt 
jq -r '.original_url+ " # " +.title'  l2.txt >>list.txt;
rm l2.txt ;
}
. "$HOME/.cargo/env"
mkcd() { mkdir -p "$@" && cd $_; }

geturls () {
    # source: http://stackoverflow.com/questions/2804467/spider-a-website-and-return-urls-only
    ${1?"Usage: geturls Link"}
    wget -q "$1" -O - | \
        tr "\t\r\n'" '   "' | \
        grep -i -o '<a[^>]\+href[ ]*=[ \t]*"\(ht\|f\)tps\?:[^"]\+"' | \
        sed -e 's/^.*"\([^"]\+\)".*$/\1/g'
    }
